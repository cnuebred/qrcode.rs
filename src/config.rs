#[derive(Debug, Copy, Clone)]
pub enum ErrorLevel {
    L,
    Q,
    M,
    H,
}
#[derive(Debug, Copy, Clone)]
pub enum ByteNameOfMode {
    Byte,
    Numeric,
    Alpha,
    Kanji,
}
#[derive(Debug, Copy, Clone)]
pub enum Mask {
    _000,
    _001,
    _010,
    _011,
    _100,
    _101,
    _110,
    _111,
}

pub type EntityPolynomial = (i16, i16, i16);
pub type ReedSolomonOptions = (i8, ErrorLevel);

// format, version
pub const VERSION_FORMAT_POLYNOMIAL: [[u8; 8]; 2] =
    [[10, 8, 5, 4, 2, 1, 0, 0], [12, 11, 10, 9, 8, 5, 2, 0]];
pub const FORMAT_STRING_XOR_VALUE: &str = "101010000010010";
pub const LEVEL_INDICATOR: [u8; 4] = [1, 3, 0, 2];
pub const BLANK_FILLER: [u8; 2] = [236, 17];
pub const ALIGNMENT_LOCATION_BASE: [u32; 2] = [6, 18];
pub const BASE_SIZE: u32 = 21;

pub const MODULO_BYTE_WISE: u32 = 285;
pub fn MODE_INDICATOR(mode: &ByteNameOfMode) -> String {
    match mode {
        ByteNameOfMode::Numeric => String::from("0001"),
        ByteNameOfMode::Alpha => String::from("0010"),
        ByteNameOfMode::Byte => String::from("0100"),
        ByteNameOfMode::Kanji => String::from("1000"),
    }
}
pub const TABLE_EC: [[(u8, u8); 4]; 40] = [
    [(7, 1), (10, 1), (13, 1), (17, 1)],
    [(10, 1), (16, 1), (22, 1), (28, 1)],
    [(15, 1), (26, 1), (18, 2), (22, 2)],
    [(20, 1), (18, 2), (26, 2), (16, 4)],
    [(26, 1), (24, 2), (18, 4), (22, 4)],
    [(18, 2), (16, 4), (24, 4), (28, 4)],
    [(20, 2), (18, 4), (18, 6), (26, 5)],
    [(24, 2), (22, 4), (22, 6), (26, 6)],
    [(30, 2), (22, 5), (20, 8), (24, 8)],
    [(18, 4), (26, 5), (24, 8), (28, 8)],
    [(20, 4), (30, 5), (28, 8), (24, 11)],
    [(24, 4), (22, 8), (26, 10), (28, 11)],
    [(26, 4), (22, 9), (24, 12), (22, 16)],
    [(30, 4), (24, 9), (20, 16), (24, 16)],
    [(22, 6), (24, 10), (30, 12), (24, 18)],
    [(24, 6), (28, 10), (24, 17), (30, 16)],
    [(28, 6), (28, 11), (28, 16), (28, 19)],
    [(30, 6), (26, 13), (28, 18), (28, 21)],
    [(28, 7), (26, 14), (26, 21), (26, 25)],
    [(28, 8), (26, 16), (30, 20), (28, 25)],
    [(28, 8), (26, 17), (28, 23), (30, 25)],
    [(28, 9), (28, 17), (30, 23), (24, 34)],
    [(30, 9), (28, 18), (30, 25), (30, 30)],
    [(30, 1), (28, 20), (30, 27), (30, 32)],
    [(26, 1), (28, 21), (30, 29), (30, 35)],
    [(28, 1), (28, 23), (28, 34), (30, 37)],
    [(30, 1), (28, 25), (30, 34), (30, 40)],
    [(30, 1), (28, 26), (30, 35), (30, 42)],
    [(30, 1), (28, 28), (30, 38), (30, 45)],
    [(30, 1), (28, 29), (30, 40), (30, 48)],
    [(30, 1), (28, 31), (30, 43), (30, 51)],
    [(30, 1), (28, 33), (30, 45), (30, 54)],
    [(30, 1), (28, 35), (30, 48), (30, 57)],
    [(30, 1), (28, 37), (30, 51), (30, 60)],
    [(30, 1), (28, 38), (30, 53), (30, 63)],
    [(30, 2), (28, 40), (30, 56), (30, 66)],
    [(30, 2), (28, 43), (30, 59), (30, 70)],
    [(30, 2), (28, 45), (30, 62), (30, 74)],
    [(30, 2), (28, 47), (30, 65), (30, 77)],
    [(30, 2), (28, 49), (30, 68), (30, 81)],
];
pub const LENGTH_BITS: [[u8; 3]; 4] = [[10, 12, 14], [9, 11, 13], [8, 16, 16], [8, 10, 12]];
pub const REMINDER: [usize; 39] = [
    0, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3,
    3, 0, 0, 0, 0, 0, 0,
];
